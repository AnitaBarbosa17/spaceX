{"ast":null,"code":"import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\nexport default function createApolloClient(initialState, ctx) {\n  // The `ctx` (NextPageContext) will only be present on the server.\n  // use it to extract auth headers (ctx.req) or similar.\n  return new ApolloClient({\n    ssrMode: Boolean(ctx),\n    link: new HttpLink({\n      uri: 'https://api.spacex.land/graphql/',\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials` or `headers`\n      fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n} // import {ApolloClient, InMemoryCache, } from 'apollo-boost';\n// import { createHttpLink } from 'apollo-link-http'; \n// const client = new ApolloClient({\n//     link: createHttpLink({\n//         uri: 'https://api.spacex.land/graphql/'\n//     }),\n//     cache: new InMemoryCache()\n// });\n// export default client;","map":{"version":3,"sources":["/Users/anitabarbosa/Documents/ESCUELA_JS/react_graphQL/spaceX/src/graphql/client.js"],"names":["ApolloClient","InMemoryCache","HttpLink","fetch","createApolloClient","initialState","ctx","ssrMode","Boolean","link","uri","credentials","cache","restore"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,eAAe,SAASC,kBAAT,CAA4BC,YAA5B,EAA0CC,GAA1C,EAA+C;AAC1D;AACA;AACA,SAAO,IAAIN,YAAJ,CAAiB;AACpBO,IAAAA,OAAO,EAAEC,OAAO,CAACF,GAAD,CADI;AAEpBG,IAAAA,IAAI,EAAE,IAAIP,QAAJ,CAAa;AACfQ,MAAAA,GAAG,EAAE,kCADU;AAC0B;AACzCC,MAAAA,WAAW,EAAE,aAFE;AAEa;AAC5BR,MAAAA;AAHe,KAAb,CAFc;AAOpBS,IAAAA,KAAK,EAAE,IAAIX,aAAJ,GAAoBY,OAApB,CAA4BR,YAA5B;AAPa,GAAjB,CAAP;AASH,C,CAID;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\n\nexport default function createApolloClient(initialState, ctx) {\n    // The `ctx` (NextPageContext) will only be present on the server.\n    // use it to extract auth headers (ctx.req) or similar.\n    return new ApolloClient({\n        ssrMode: Boolean(ctx),\n        link: new HttpLink({\n            uri: 'https://api.spacex.land/graphql/', // Server URL (must be absolute)\n            credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n            fetch,\n        }),\n        cache: new InMemoryCache().restore(initialState),\n    });\n}\n\n\n\n// import {ApolloClient, InMemoryCache, } from 'apollo-boost';\n// import { createHttpLink } from 'apollo-link-http'; \n\n// const client = new ApolloClient({\n//     link: createHttpLink({\n//         uri: 'https://api.spacex.land/graphql/'\n//     }),\n//     cache: new InMemoryCache()\n// });\n\n// export default client;"]},"metadata":{},"sourceType":"module"}